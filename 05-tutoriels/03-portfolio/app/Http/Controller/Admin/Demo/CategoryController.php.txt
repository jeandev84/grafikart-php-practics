<?php
declare(strict_types=1);

namespace App\Http\Controller\Admin\Demo;

use App\Http\Controller\AdminController;
use App\Repository\CategoryRepository;
use App\Security\Token\UserTokenStorage;
use Grafikart\Http\Request\ServerRequest;
use Grafikart\Http\Response\RedirectResponse;
use Grafikart\Http\Response\Response;

/**
 * CategoryController
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package  App\Http\Controller\Admin
 */
class CategoryController extends AdminController
{
      public function index(ServerRequest $request): Response
      {
          $categoryRepository = new CategoryRepository($this->getConnection());
          $id = (int)$request->getQueryParams()['delete'] ?? 0;

          if($id) {
              // CsrfTokenMiddleware
              $token = $request->getQueryParams()['csrf'] ?? '';
              if (!$this->csrfToken->isValidToken($token)) {
                  return new Response("Invalid token $token");
              }
              // End CsrfTokenMiddleware
              $categoryRepository->delete($id);

              return $this->redirectTo("/admin/category?delete=$id&csrf=$token")
                         ->withStatusCode(301);
          }


          return $this->render('admin/category/index', [
              'categories' => $categoryRepository->findAll()
          ]);
      }




      /**
       * @param ServerRequest $request
       * @return Response
      */
      public function create(ServerRequest $request): Response
      {
         return $this->render('admin/category/create');
      }


      /**
       * @param ServerRequest $request
       * @return Response
      */
      public function edit(ServerRequest $request): Response
      {
        $id = (int)$request->getQueryParams()['id'] ?? 0;

        $categoryRepository = new CategoryRepository($this->getConnection());

        $category = $categoryRepository->find($id);

        return $this->render('admin/category/edit', [
            'category' => $category
        ]);
     }


//    /**
//     * @param ServerRequest $request
//     * @return bool
//     */
//    public function delete(ServerRequest $request): bool
//    {
//        $id = (int)$request->getQueryParams()['delete'] ?? 0;
//
//        // CsrfTokenMiddleware
//        $token = $request->getQueryParams()['csrf'] ?? '';
//        if (!$this->csrfToken->isValidToken($token)) {
//            throw new \InvalidArgumentException("Invalid token $token");
//        }
//        // End CsrfTokenMiddleware
//
//        $categoryRepository = new CategoryRepository($this->getConnection());
//
//        return $categoryRepository->delete($id);
//    }
}